@import url('https://fonts.googleapis.com/css2?family=Noto+Sans:wght@400;700&family=Raleway:wght@400;700;800&display=swap');

* { box-sizing: border-box; }

/* Declarando o font-size para o 
elemento ra√≠z (html).

IMPORTANTE! Esta configura√ß√£o
permitir√° o uso da medida REM 
em v√°rios lugares no CSS. 

Exemplo: 1rem equivale (no momento) a 14px */
html { font-size: 14px; }

body { 
    background-color: #fffffa; 
    font-family: 'Noto Sans', Verdana, Geneva, Tahoma, sans-serif;

    /* Sticky Footer:
    https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/ */

    /* Solu√ß√£o rodap√© (parte 1) */
    display: flex;
    min-height: 100vh;
    flex-direction: column;
}

/* Solu√ß√£o do rodap√© (parte 2) 
Usamos flex: 1 para garantir que a
main ocupar√° todo o espa√ßo dispon√≠vel
no body (que, j√° segue o tamanho
da viewport). Na pr√°tica, isso 
ir√° empurrar o rodap√© sempre pra
baixo. */
main { flex: 1; }

/* CSS Reset
T√©cnica de "limpeza" de formata√ß√µes pr√©-existentes
nos navegadores. Neste exemplo abaixo, estamos
resetando apenas alguns elementos do site. */
body, h1, h2, p, figure, .menu {
    margin: 0;
    padding: 0;
}

h1 {
    font-family: Raleway, sans-serif;
    text-transform: uppercase;
    font-weight: 800;
    font-size: 1.5rem;
}

h1 a {
    background-color: #0d0000;
    color: #fffffa;
    border-radius: 5px;
    padding: 0.3rem 1rem;
}

a { text-decoration: none; }

header {
    /* Deixar o cabe√ßalho
    fixo no topo da p√°gina */
    position: sticky;
    top: 0;
    z-index: 10;
    background-color: #fffffa;
}

/* Ativando flex somente para
o limitador que est√° dentro do header */
header .limitador {
    height: 12vh;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

nav h2 a {
    color: #0d0000;
    font-size: 1.2rem;
    padding: 1rem;
    display: inline-block;
}

nav h2 a:hover, nav h2 a:focus, 
.menu a:hover, .menu a:focus {
    background-color: #bbbbbb;
}

.menu {  /* lista de links */
    list-style: none; 

    /* Esta propriedade
    ser√° usada posteriormente
    para esconder a lista de links */
    display: none;
}

.menu a {
    color: #0d0000;
    font-weight: bold;
    display: flex;
    height: 50px;
    justify-content: center;
    align-items: center;
}


/* ATEN√á√ÉO!
Esta regra abaixo somente ir√°
funcionar com o aux√≠lio de programa√ß√£o
JS.

Objetivo: quando duas classes estiverem
combinadas ("menu" e "aberto"), o menu
ser√° exibido completamente. */
.menu.aberto {
    display: flex;
    flex-direction: column;
    background-color: white;
    
    position: absolute;
    right: 0;
    left: 0;
}

.destaque {
    background-image: url(../imagens/fundo-destaque.jpg);

    height: 88vh;

    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;

    background-size: cover;
    background-attachment: fixed;
}

.destaque h2, .destaque p {
    color: white;
    text-align: center;
}

.destaque h2 {
    /* Fonte responsiva usando
    fun√ß√£o: clamp(
        tamanho m√≠nimo, 
        tamanho ideal, 
        tamanho m√°ximo) */
    font-size: clamp(3rem, 10vw, 7rem);

    font-weight: 800;

    /* Etapa 2: "chamar"
    e configurar a execu√ß√£o
    da anima√ß√£o. */
    animation-name: aparecer;
    animation-duration: 3s;

    /* animation-iteration-count: infinite;
    animation-direction: alternate; */
}

.destaque p {
    font-size: clamp(1.5rem, 3vw, 3rem);

    animation-name: aparecer;
    animation-duration: 3s;
    animation-delay: 2s;

    /* Usamos a propriedade/valor
    abaixo para for√ßar a anima√ß√£o
    a iniciar (ap√≥s os 2s) j√°
    com a opacidade zerada, o
    tamanho menor e posi√ß√£o
    diferente. */
    animation-fill-mode: backwards;
}



/* Etapa 1
Criar uma regra de
anima√ß√£o */
@keyframes aparecer {
    /* D√™ (como inicia) */
    from { 
        opacity: 0;
        transform: 
            scale(0.1) 
            translateY(-600px);
    }

    /* Para (como termina) */
    to { 
        opacity: 1;
        transform: 
            scale(1) 
            translateY(0);
    }
}

/* Tornando as imagens responsivas/flex√≠veis */
img { max-width: 100%; }

article h2 {
    padding: 1rem;
    font-size: 2rem;
    font-family: "Raleway", sans-serif;
    color: #6b6b6b;
}

article p,
article address {
    padding: 0.5rem 0;
    font-size: 1.3rem;
}

article address {
    font-style: normal;
}

/* Alinhamento dos articles
SOMENTE que tenham as classes
indicadas */
.front-end,
.historia,
.localizacao {
    text-align: center;
}

.historia {
    background-image: url(../imagens/fundo-madeira.jpg);
    background-attachment: fixed;
    background-size: cover;
}

.historia h2 {
    color: white;
    text-shadow: black 1px 1px 3px;
} 

.historia iframe {
    width: 100%;
    max-width: 700px;
    margin-bottom: 2rem;
}

.localizacao iframe {
    width: 100%;
    margin-top: 2rem;
}

.front-end figure {
    margin: 2rem auto;
}

.limitador {
    width: 95vw;
    margin: auto;
}

footer {
    background-color: #0d0000;
    color: white;
    height: 30vh;
    font-weight: bold;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
}


/* Regras para p√°ginas internas
(Produtos, Servi√ßos e Contato) */
.conteudo {
    background-color: #fbfbfb;
    padding: 0.5rem;
    border-radius: 8px;
}

.conteudo h2 {
    padding-left: 0;
    text-align: center;
}

/* Pseudo-elementos ::after e ::before */
.conteudo h2::before { content: "üìå"; }
.conteudo h2::after { content: "üí°"; }

/* Pseudo-elemento ::first-letter */
/* .conteudo p::first-letter { 
    font-weight: bold; 
    font-size: 1.2rem;
} */



table, th, td {
    border: solid 2px black;
    
    /* Remove espa√ßamento
    entre as bordas. */
    border-collapse: collapse;
}

table {
    width: 80%;
    max-width: 600px;
    margin: auto;
}

caption {
    text-transform: uppercase;
    font-weight: bold;
    font-size: 1.2rem;
    padding-bottom: 0.5rem;
}

th {
    width: 33.33%;
    background-color: #0d0000;
    color: #fffffa;
    padding: 0.7rem;
    font-size: 1.1rem;
}

td {
    padding: 2%;
    font-size: 1.1rem;
}

/* Pseudo-classes de sele√ß√£o */

/* last-child -> √∫ltimo td */
td:last-child { text-align: right; }

/* first-child -> primeiro td */
td:first-child { text-transform: uppercase; }

/* nth-child(valor) -> en√©simo td */
td:nth-child(2) { text-align: center; }

/* Pseudo-elementos 
Obs.: sempre iniciam com duplo dois-pontos */
td:last-child::before { content: "R$ "; }


/* odd (√≠mpar)  */
tr:nth-child(odd){ background-color: rgb(248, 248, 209); }

/* even (par) */
tr:nth-child(even){ background-color: rgb(223, 242, 249); }

.fotos { text-align: center; }

.fotos img {
    border-radius: 50%;
    box-shadow: rgba(0, 0, 0, 0.449) 0 0 50px;
    filter: grayscale(100%);
    transform: scale(0.9);
    transition: 0.2s;
}

.fotos img:hover {
    transform: scale(1);
    filter: grayscale(0);
}

form {
    width: 95%;
    margin: auto;
    padding: 1rem;
    background-color: rgba(128, 128, 128, 0.2);
    border-radius: 8px;
}

/* Pseudo-classe :not() 
Permite criar exce√ß√µes para determinadas regras.
No exemplo abaixo, estamos selecionando todos os
inputs EXCETO os que s√£o do tipo radio e checkbox.*/
input:not([type=radio]):not([type=checkbox]), 
select, textarea {
    border: none;
    padding: 1%;
    width: 100%;
    box-shadow: darkgray 0 0 5px;
    height: 40px;
}

textarea { height: auto; }

label { font-size: 1.3rem; }

form div { margin-top: 1rem; }

button {
    border: none;
    background-color: black;
    color: white;
    padding: 1rem;
    font-weight: bold;
}

button:hover, button:focus {
    background-color: rgb(84, 84, 84);
    cursor: pointer;
}

/* Crie as seguintes regras condicionais
(media queries) */

/* Para telas a partir de 530px, fa√ßa:

- esconder a palavra "Menu"
- habilitar o flex para a classe menu (lista)
- definir largura de 100% para os itens dentro da lista menu
- definir largura de 70% para o elemento nav
- reduzir a altura das imagens contidas no front-end para 150px */


@media screen and (min-width: 530px) {
    nav h2 { display: none; }
    .menu { display: flex; }
    .menu li { width: 100%; }
    nav { width: 70%; }    
    .front-end figure img { height: 150px; }
}

/* Para telas com pelo menos 800px de largura, fa√ßa:

- aumentar o tamanho geral dos textos (a refer√™ncia agora dever√° ser de 18px)

- Definir a largura m√°xima da classe limitador para
1100px */
@media screen and (min-width: 800px) {
    html { font-size: 18px; }
    .limitador { max-width: 1100px; }
}






